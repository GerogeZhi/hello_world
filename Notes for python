# -*- coding: utf-8 -*-
"""
Created on Sun Aug 27 12:51:15 2017

@author: Administrator
"""
#Customizing your plots

import matplotlib.pyplot as plt
import numpy as np

plt.plot(x,y1,'bo-',linewidth=2,markersize=4,label='first')
plt.plot('gs-',linewidth=2,markersize=6,label='second')
plt.xlabel('x')
plt.ylabel('y')
plt.axis([-2,12,-5,105])
plt.legend(loc='upper left')
plt.savefig('myplot.pdf')
plt.plot([0,1,2],[0,1,4])


x=np.logspace(0,1,20)
#generating histograms
plt.figure()
plt.subplot(221)
plt.hist(x,bins=30)
plt.subplot(222)
plt.hist(x,bins=30,normed=True)
plt.subplot(223)
plt.hist(x,bins=30,cumulative=30)
plt.subplot(224)
plt.hist(x,bins=30,normed=True,histtype='step')


#simulating randomness
import random
random.choice([1,2,3,4,5,6])
random.choice(range(1,7))
random.choice([range(1,7)])#out:range(1,7) choose one project

#visualization
ys=[]
for rep in range(100):
    y=0
    for k in range(10):
        x=random.choice(range(1,7))
        y+=x
    ys.append(y)
plt.hist(ys)

#numpy random
x=np.random.randint(1,7,(100,10))
y=np.sum(x,axis=1)
plt.hist(y)#np random is 10 times faster!

#measure running time
import time 
start_time=time.clock()

end_time=time.clock()
print(end_time-start_time)

#random walk
delta_x=np.random.normal(0,1,(2,100))
x=np.cumsum(delta_x,axis=1)
plt.plot(x[0],x[1],'ro-')

x_0=np.array([[0],[0]])
delta_x=np.random.normal(0,1,(2,100))
x=np.concatenate((x_0,np.cumsum(delta_x,axis=1)),axis=1)
plt.plot(x[0],x[1],'ro-')

plt.figure()
plt.subplot(121)
plt.plot(x[0],x[1],'ro-')
plt.subplot(122)
plt.plot(x[0],x[1],'ro-',linewidth=0.5,markersize=3)


#reading in a book
text=read_book('./English/shakespeare/Romeo and Juliet.txt')
len(text)
ind=text.find("What's in a name?")
sample_text=text[ind:ind+1000]

#navigate file directories
import os
book_dir="./Books"
for language in os.listdir(book_dir):
    for author in os.listdir(book_dir+'/'+language):
        for title in os.listdir(book_dir+'/'+language+'/'+author):
            inputfile=book_dir+'/'+language+'/'+author+'/'+title
            print(inputfile)

#pandas
import pandas as pd
stats=pd.DataFrame(columns=('language','author','title','unique'))
stats.loc[title_num]=language,author.capitalize(),title.replace('.txt',''),sum(counts),num_unique
title_num+=1

#plot the book length
subset=stats[stats.language=='English']
plt.loglog(subset.length,subset.unique,'o',label='English',color='crimson')

#find the nearest neighbors
def find_nearest_neighbors(p,points,k=5):
    '''find the k nearest neighbors of p and return their indices'''
    distances=np.zeros(points.shape[0])
    for i in range(len(distances)):
        distances[i]=distance(p,points[i])
        ind=np.argsort(distances)#return the sorted index which we need return ind[:k]

#most common vote
def majority_vote(votes):
    vote_counts={}
    for vote in votes:
        if vote in vote_counts:
            vote_counts[vote]+=1
        else:
            vote_counts[vote]=1
    winners=[]
    max_counts=max(vote_counts.values())
    for vote,count in vote_counts.items():
        if count==max_counts:
            winners.append(vote)
    return random.choice(winners)

#predict the class
def knn_predict(p,points,outcomes,k=5):
    ind=find_nearest_neighbors(p,points,k)
    return majority_vote(outcomes[ind])
outcomes=[0,0,0,0,1,1,1,1,1]


#compare
points=np.random.normal(0,1,(100,2))
import matplotlib.pyplot as plt
plt.plot(points[:,0],points[:,1],'ro')
plt.plot(p[0],p[1],'bo')
plt.axis([0.5,3.5,0.5,3.5])


#plot the prediction grid
predictors=np.random.normal(0,1,(100,2))
def plot_prediction_grid(xx,yy,prediction_grid,filename):
    '''plot KNN predictions for every point on the grid'''
    from matplotlib.colors import ListedColormap
    background_colormap=ListedColormap(['hotpink','lightskyblue','yellowgreen'])
    observation_colormap=ListedColormap(['red','blue','green'])
    plt.figure(figsize=(10,10))
    plt.pcolormesh(xx,yy,prediction_grid,cmap=background_colormap,alpha=0.5)
    plt.scatter(predictors[:,0],predictors[:,1],c=outcomes,cmap=observation_colormap,s=50)
    plt.xlabel('variable1')
    plt.ylabel('variable2')
    plt.xticks(())
    plt.yticks(())
    plt.xlim(np.min(xx),np.max(xx))
    plt.ylim(np.min(yy),np.max(yy))
    plt.savefig(filename)

#bias_variance tradeoff
(predictors,outcomes)=generate_synth_data()
k=5;filename='knn_synth_5.pdf';limits=(-3,4,-3,4);h=0.1
(xx,yy,prediction_grid)=make_prediction_grid(predictors,outcomes,limits,h,k)
plot_prediction_grid(xx,yy,prediciton_grid,filename)

#load a CSV
whisky=pd.read_csv('whiskies.txt')
whisky['region']=pd.read_csv('regions.txt)
whisky.head()
whisky.columns
flavors=whisky.iloc[:,2:14]

#plot a correlation matrix
corr_flavors=pd.DataFrame.corr(flavors)
plt.figure(10,10)
plt.pcolor(corr_flavors)
plt.colorbar()
plt.savefig('corr_flavors.pdf')

spectral co-clustering
'''A method for finding clusters of objects by the similarity of their attributes'''
from sklearn.cluster.bicluster import SpectralCoclustering
model=SpectralCoclustering(n_clusters=6,random_state=0)
model.fit(corr_whisky)
model.rows_
np.sum(model.rows_,axis=1)
np.sum(model.rows_,sxia=0)
model.row_labels_

#plot latitude and longitude
bird_names=pd.unique(birddata.bird_name)
for bird_name in bird_names:
    ix=birddata.bird_name==bird_name
    x,y=birddata.longitude[ix],birddata.latitude[ix]
    plt.plot(x,y,label=bird_name)
    plt_xlabel('longtitude')
    plt_ylabel('labitude')
    plt.legend(loc='lower right')
    plt.savefig('3bird_traj.pdf')

#random graphs
import networkx as nx
from scipy.stats import bernoulli
bernoulli.rvs(p=0.2)
def er_graph(N,p):
    '''generate an ER graph'''
    G=nx.Graph()
    G.add_nodes_from(range(N))
    for node1 in G.nodes():
        for node2 in G.nodes():
            if node1 < node2 and bernoulli.rvs(p=p):
                G.add_edge(node1,node2)
    return G
nx.draw(er_graph(50,0.08),node_size=40,node_color='red')
plt.savefig('er1.pdf')

#Networkx Model
import networkx as nx
G=nx.Graph()
G.add_node(1)
G.add_nodes_from([2,3])
G.add_nodes_from(['u','v'])
G.add_edge(1,2)
G.add_edge('u','v')
G.add_edges_from([(1,3),(1,4),(1,5),(1,6)])
G.remove_node(2)
G.remove_nodes_from([4,5])
G.remove_edge(1,3)
G.remove_edges_from([(1,2),('u','v')])
G.number_of_edges()

#visualize a graph
G=nx.karate_club_graph()
nx.draw(G,with_labels=True,node_color='lightblue',edge_colors='red')
plt.savefig('karate_graph.pdf')
G.degree()[33]
G.degree(33)



